;;; -*- Mode: lisp; Syntax: ansi-common-lisp; Base: 10 -*-
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Copyright (c) 2000 The Regents of the University of California.
;;; All rights reserved. 
;;; 
;;; Permission is hereby granted, without written agreement and without
;;; license or royalty fees, to use, copy, modify, and distribute this
;;; software and its documentation for any purpose, provided that the
;;; above copyright notice and the following two paragraphs appear in all
;;; copies of this software.
;;; 
;;; IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
;;; FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
;;; ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
;;; THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
;;; SUCH DAMAGE.
;;;
;;; THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
;;; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
;;; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
;;; PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
;;; CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
;;; ENHANCEMENTS, OR MODIFICATIONS.
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Originally written by Tunc Simsek, University of California, Berkeley,
;;; 2000, simsek@eecs.berkeley.edu
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;;  To compile and load MATLISP:
;;;
;;;      from the shell prompt (this needs to be done only once):
;;;
;;;                 $ make
;;;
;;;      and from within lisp:
;;;
;;;               (load "start.lisp")
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; $Id: start.lisp.in,v 1.3 2011/01/25 18:49:31 rtoy Exp $
;;;
;;; $Log: start.lisp.in,v $
;;; Revision 1.3  2011/01/25 18:49:31  rtoy
;;; Replace DEFLOGICALPATH with a simpler version that also supports
;;; parallel source builds.  Hope this version works for sbcl and
;;; allegro.
;;;
;;; Revision 1.2  2011/01/25 18:36:56  rtoy
;;; Merge changes from automake-snapshot-2011-01-25-1327 to get the new
;;; automake build infrastructure.
;;;
;;; Revision 1.1.2.3  2011/01/25 18:18:18  rtoy
;;; Add translation for builddir so we can get access to the build directory.
;;;
;;; Revision 1.1.2.2  2011/01/25 15:31:07  rtoy
;;; Remove the cmu change to load-foreign.  Now that shared libraries are
;;; created correctly, the hack isn't needed because the libraries are
;;; correctly loaded as shared objects without having to use ld.
;;;
;;; Revision 1.1.2.1  2011/01/25 15:00:19  rtoy
;;; Initial version.
;;;
;;; Revision 1.12  2009/08/19 16:01:34  rtoy
;;; Add support for interfacing to potrf and potrs.  Submitted by Knut
;;; Gjerden.
;;;
;;; src/potrf.lisp:
;;; o New file for matlisp interface to potrf.  Modeled after getrf.
;;;
;;; src/potrs.lisp:
;;; o New file for matlisp interface to potrs.  Modeled after getrs.
;;;
;;; src/lapack.lisp:
;;; o Add Fortran interface to dpotrf, zpotrf, dpotrs, and zpotrs.
;;;
;;; matlisp.mk.in:
;;; o Add dpotrf.o, dpotf2.o dpotrs.o zpotrs.o to list of LAPACK files we
;;;   need to compile.
;;;
;;; packages.lisp:
;;; o Export DPOTRS, ZPOTRS, DPOTRF, and ZPOTRF
;;; o Export POTRF! and POTRS!.
;;;
;;; start.lisp:
;;; o Don't use verbose output from mk:oos.
;;;
;;; system.dcl:
;;; o Add potrf and potrs to system.
;;;
;;; Revision 1.11  2004/05/20 21:41:15  rtoy
;;; Put the start up stuff in its own MATLISP-START package to prevent
;;; polluting COMMON-LISP-USER.
;;;
;;; Revision 1.10  2003/12/07 15:03:44  rtoy
;;; Add support for SBCL.  I did not test if SBCL works, but CMUCL still
;;; works.
;;;
;;; From Robbie Sedgewick on matlisp-users, 2003-11-13.
;;;
;;; Revision 1.9  2003/06/27 03:42:49  rtoy
;;; Clean up logical pathname translations for CMUCL.  Don't include the
;;; version part for the translation.  (Why doesn't this work anymore?)
;;;
;;; Revision 1.8  2001/02/26 22:45:37  rtoy
;;; There has to be a colon in the pathname to be a valid CMUCL
;;; search-list namestring.  Check for it.
;;;
;;; Revision 1.7  2001/02/26 19:57:13  rtoy
;;; o Make deflogicalpath handle CMUCL search lists.
;;; o Use keywords for mk:oos :matlisp so we put drop random symbols in
;;;   the CL-USER package. (Should we use strings?)
;;;
;;; Revision 1.6  2001/02/22 08:10:35  simsek
;;; o Added support for CMUCL 18c and Allegro 6.0
;;;
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(require :asdf)

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defpackage "MATLISP-START"
    (:use "COMMON-LISP")
    (:export "DEFLOGICALPATH")
    (:documentation "A package to hold Matlisp startup stuff"))
  )

(in-package "MATLISP-START")


(pushnew :matlisp *features*)

(let ((root "root"))

(defun setlogicalroot (r)
  (unless (stringp r)
    (error "argument ~a given to ~a should be a string"
	   r
	   'setlogicalroot))
  (setq root r))

(defun getlogicalroot ()
  root)
)

(defun deflogicalpath (name)
  "
  Syntax
  ======
  (DEFLOGICALPATH name)

  Purpose
  =======
  Defines a reasonable logical pathname translation for NAME, which
  must be a string.
  The translations are defined for the directory and subdirectories
  in which the file that contained the form was loaded.

  Implementation Notes
  ====================
  DEFLOGICALPATH must be called on argument \"root\" first.  This
  determines the root directory that will be used to dump the
  file \"logical\" containing all the logical pathname translations.
  In particular, a call to DEFLOGICALPATH on \"root\" clears
  all entries in the file \"logical\".
"
  (flet ((default-dir ()
	   (load-time-value *load-truename*)))
    (setf (logical-pathname-translations "matlisp")
	  (list
	   ;; lib is where the libraries are.
	   (list "lib;**;*.*.*"
		 (merge-pathnames "lib/**/*.*"
				  (default-dir)))
	   ;; bin is where we put the compiled lisp files
	   (list "bin;**;*.*.*"
		 (merge-pathnames "bin/**/*.*"
				  (default-dir)))
	   ;; src is the src directory in our build directory
	   (list "src;**;*.*.*"
		 (merge-pathnames "src/**/*.*"
				  (default-dir)))
	   ;; srcdir is the source directory where the matlisp sources
	   ;; are.  (Basically the top-level matlisp directory.)
	   (list "srcdir;**;*.*.*"
		 (merge-pathnames "@srcdir@/**/*.*"
				  (default-dir)))
	   ;; builddir is the top-level of the build directory.
	   ;; Basically, it's the current directory.
	   (list "builddir;**;*.*.*"
		 (merge-pathnames "**/*.*"
				  (default-dir)))
	   (list "*.*.*"
		 (merge-pathnames "*.*"
				  (default-dir)))))))

(setlogicalroot "matlisp")
(deflogicalpath "matlisp")



(load "matlisp:srcdir;matlisp.asd")
(load "matlisp:builddir;config.lisp")

(in-package "CL-USER")

(asdf:oos 'asdf:load-op :matlisp)

(load "matlisp:srcdir;save.lisp")

(format t "

 ** MATLISP is loaded.  Type (HELP MATLISP)
    to see a list of available symbols.
    To use matlisp:

          (use-package \"MATLISP\")

    or

          (in-package \"MATLISP-USER\")

")


