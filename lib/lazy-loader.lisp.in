;;; -*- Mode: lisp; Syntax: ansi-common-lisp; Base: 10 -*-
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Copyright (c) 2000 The Regents of the University of California.
;;; All rights reserved. 
;;; 
;;; Permission is hereby granted, without written agreement and without
;;; license or royalty fees, to use, copy, modify, and distribute this
;;; software and its documentation for any purpose, provided that the
;;; above copyright notice and the following two paragraphs appear in all
;;; copies of this software.
;;; 
;;; IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
;;; FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
;;; ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
;;; THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
;;; SUCH DAMAGE.
;;;
;;; THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
;;; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
;;; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
;;; PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
;;; CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
;;; ENHANCEMENTS, OR MODIFICATIONS.
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;;  This file is used to generate 'lazy-loader.lisp'.  Essentially, when
;;;  the 'configure' script is executed the tokens in this file,
;;;  e.g. FLIBS, get substituted with the appropriate machine specific
;;;  parameters and the resulting file is saved in 'lazy-loader.lisp'.
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; $Id: lazy-loader.lisp.in,v 1.17 2011/01/25 18:36:56 rtoy Exp $
;;;
;;; $Log: lazy-loader.lisp.in,v $
;;; Revision 1.17  2011/01/25 18:36:56  rtoy
;;; Merge changes from automake-snapshot-2011-01-25-1327 to get the new
;;; automake build infrastructure.
;;;
;;; Revision 1.16.2.1  2011/01/25 15:01:46  rtoy
;;; Update for new libraries.  There's not just one libmatlisp library
;;; anymore.
;;;
;;; Revision 1.16  2005/06/24 04:04:08  rtoy
;;; Update for CMUCL with linkage tables.  In this case, we can just load
;;; up the matlisp shared lib.  But not if we're also using ATLAS, which
;;; usually doesn't come as a shared lib.
;;;
;;; Revision 1.15  2005/06/15 13:13:57  rtoy
;;; SBCL doesn't have load-1-foreign anymore; it's called
;;; load-shared-object.
;;;
;;; From Cyrus Harmon.
;;;
;;; Revision 1.14  2004/03/17 03:28:09  simsek
;;; Adding DFFTPACK support for windows.
;;;
;;; Revision 1.13  2004/03/17 03:26:08  simsek
;;; Windows library is now called libmatlisp.dll.
;;;
;;; Revision 1.12  2003/12/07 15:03:44  rtoy
;;; Add support for SBCL.  I did not test if SBCL works, but CMUCL still
;;; works.
;;;
;;; From Robbie Sedgewick on matlisp-users, 2003-11-13.
;;;
;;; Revision 1.11  2001/04/26 13:42:57  rtoy
;;; ATLAS_DIR variable needs to contain the -L flag.  Otherwise, we get a
;;; dangling -L option if we're not using ATLAS.
;;;
;;; Revision 1.10  2001/04/25 17:50:39  rtoy
;;; o Fix the atlas lib stuff
;;; o Reinstate FLIBS because we need that.
;;;
;;; Revision 1.9  2001/03/19 17:07:47  rtoy
;;; Allow the user to specify using ATLAS libraries.
;;;
;;; Revision 1.8  2001/03/08 14:46:18  rtoy
;;; Rename libmatlispshared.so to libmatlisp.so
;;;
;;; Revision 1.7  2001/03/06 17:49:56  rtoy
;;; CMUCL can use the shared library, so make it so.  Also, it seems we
;;; don't need FLIBS so take that out as well.
;;;
;;; Revision 1.6  2000/10/04 15:38:18  simsek
;;; o Added dfftpack to loaded binaries
;;;  o Added unload-blas-&-lapack-libraries for Allegro image
;;;    saving support
;;;
;;; Revision 1.5  2000/10/04 01:22:21  simsek
;;; o Changed package to MATLISP
;;;   This avoids interning symbols in packages other
;;;   than MATLISP
;;;
;;; Revision 1.4  2000/07/11 02:49:55  simsek
;;; *** empty log message ***
;;;
;;; Revision 1.3  2000/07/11 02:08:19  simsek
;;; Added support for Allegro CL
;;;
;;; Revision 1.2  2000/05/05 21:31:00  simsek
;;; o Added the library libdfftpack to the load list
;;;
;;; Revision 1.1  2000/04/13 23:34:29  simsek
;;; o This file is used by lisp to load foreign libraries.
;;; o Initial revision.
;;;
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(in-package "MATLISP")

;; Tell cffi where our libraries are.
(push "@libdir@/" cffi:*foreign-library-directories*)

;; Define our libraries.

;; For some reason, on Darwin (OSX), we can't load the libraries if we
;; specify the full path.  Loading the library fails because there are
;; undefined symbols (__gfortran_stop_numeric) referenced from the
;; library.  However, everything works if the full path is not given.
;; This could be a bug in how automake generates libraries on Darwin.
;; Not really sure.
;;
;; This isn't a problem on linux or sparc.
(cffi:define-foreign-library dfftpack
  (:darwin "libdfftpack.dylib")
  (t (:default "@libdir@/libdfftpack")))

(cffi:define-foreign-library toms715
  (:darwin "libtoms715.dylib")
  (t (:default "@libdir@/libtoms715")))

(cffi:define-foreign-library odepack
  (:darwin "libodepack.dylib")
  (t (:default "@libdir@/libodepack")))

(if @ATLAS_P@
    (progn
      ;; Define the ATLAS libraries and their locations.
      (push "@ATLAS_DIR@" cffi:*foreign-library-directories*)
      (cffi:define-foreign-library atlas
	(t (:default "libatlas")))

      (cffi:define-foreign-library cblas
	(t (:default "libcblas")))

      (cffi:define-foreign-library f77blas
	(t (:default "libf77blas")))

      (cffi:define-foreign-library lapack
	(t (:default "liblapack"))))
    (progn
      ;; Use our blas and lapack libraries
      (cffi:define-foreign-library blas
	(:darwin "libblas.dylib")
	(t (:default "@libdir@/libblas")))
      (cffi:define-foreign-library lapack
	(:darwin "liblapack.dylib")
	(t (:default "@libdir@/liblapack")))))


(defun load-blas-&-lapack-libraries ()
  ;; Load the additional matlisp libraries
  (cffi:use-foreign-library dfftpack)
  (cffi:use-foreign-library toms715)
  ;;(cffi:use-foreign-library odepack)
  (cond (@ATLAS_P@
	 (cffi:use-foreign-library atlas)
	 (cffi:use-foreign-library cblas)
	 (cffi:use-foreign-library f77blas)
	 (cffi:use-foreign-library lapack)
	 )
	(t
	 (cffi:use-foreign-library blas)
	 (cffi:use-foreign-library lapack))))

#+:allegro
(defun load-blas-&-lapack-libraries ()
  #+:linux86-64
  (progn 
    ;; Load the libraries.
    (dolist (lib *additional-libs*)
      (load lib))
    (load "matlisp:lib;linux64;libblas.so")
    (load "matlisp:lib;linux64;liblapack.so"))
  #+:microsoft-32
  (progn 
    ;; The libblas and liblapack have dependencies that need to be satisfied.
    ;; It's annoying, but the easiest way I know to do it is change into the directory
    ;; when attempting to load the dll.
    (let ((old-dir (excl:current-directory)))
      ;; Change to the win32 directory.
      (excl:chdir "matlisp:lib;win32;")
      ;; Load the libraries.
      (load "./libblas.dll")
      (load "./liblapack.dll")
      ;; Change back.
      (excl:chdir old-dir)))
  #+:microsoft-64
  (progn 
    ;; The libblas and liblapack have dependencies that need to be satisfied.
    ;; It's annoying, but the easiest way I know to do it is change into the directory
    ;; when attempting to load the dll.
    (let ((old-dir (excl:current-directory)))
      ;; Change to the win64 directory.
      (excl:chdir "matlisp:lib;win64;")
      ;; Load the libraries.
      (load "./libblas64.dll")
      (load "./liblapack64.dll")
      ;; Change back.
      (excl:chdir old-dir))))

(defun load-blas-&-lapack-binaries ()
  (load-blas-&-lapack-libraries)
  (load (translate-logical-pathname "matlisp:bin;blas") :verbose nil)
  (load (translate-logical-pathname "matlisp:bin;lapack") :verbose nil)
  (load (translate-logical-pathname
	 "matlisp:bin;dfftpack") :verbose nil))

#+(or :cmu :sbcl)
(defun unload-blas-&-lapack-libraries ()
  nil)

#+(and :allegro (not :mswindows))
(defun unload-blas-&-lapack-libraries ()
  (ff:unload-foreign-library "matlisp:lib;linux64;libdfftpack.so")
  (ff:unload-foreign-library "matlisp:lib;linux64;libtoms715.so")
  (ff:unload-foreign-library "matlisp:lib;linux64;libblas.so")
  (ff:unload-foreign-library "matlisp:lib;linux64;liblapack.so"))

#+(and :allegro :mswindows)
(defun unload-blas-&-lapack-libraries ()
  #+:microsoft-32 (let ((old-dir (excl:current-directory)))
					  ;; Change to the win32 directory.
					  (excl:chdir "matlisp:lib;win32;")
					  ;; Unload the libraries.
					  (ff:unload-foreign-library "./liblapack.dll")
					  (ff:unload-foreign-library "./libblas.dll")
					  ;; Change back.
					  (excl:chdir old-dir))
  #+:microsoft-64 (let ((old-dir (excl:current-directory)))
					  ;; Change to the win64 directory.
					  (excl:chdir "matlisp:lib;win64;")
					  ;; Unload the libraries.
					  (ff:unload-foreign-library "./liblapack64.dll")
					  (ff:unload-foreign-library "./libblas64.dll")
					  ;; Change back.
					  (excl:chdir old-dir)))


(eval-when (:load-toplevel :execute)
  (format t "Loading BLAS and LAPACK libraries~%")
  (load-blas-&-lapack-libraries)
  (format t "DONE~%"))
