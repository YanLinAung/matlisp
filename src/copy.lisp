;;; -*- Mode: lisp; Syntax: ansi-common-lisp; Package: :matlisp; Base: 10 -*-
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Copyright (c) 2000 The Regents of the University of California.
;;; All rights reserved. 
;;; 
;;; Permission is hereby granted, without written agreement and without
;;; license or royalty fees, to use, copy, modify, and distribute this
;;; software and its documentation for any purpose, provided that the
;;; above copyright notice and the following two paragraphs appear in all
;;; copies of this software.
;;; 
;;; IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
;;; FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
;;; ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
;;; THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
;;; SUCH DAMAGE.
;;;
;;; THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
;;; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
;;; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
;;; PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
;;; CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
;;; ENHANCEMENTS, OR MODIFICATIONS.
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Originally written by Raymond Toy.
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; $Id: copy.lisp,v 1.9 2011/01/25 18:36:56 rtoy Exp $
;;;
;;; $Log: copy.lisp,v $
;;; Revision 1.9  2011/01/25 18:36:56  rtoy
;;; Merge changes from automake-snapshot-2011-01-25-1327 to get the new
;;; automake build infrastructure.
;;;
;;; Revision 1.8.2.1  2011/01/25 18:16:53  rtoy
;;; Use cl:real instead of real.
;;;
;;; Revision 1.8  2004/05/24 16:34:22  rtoy
;;; More SBCL support from Robert Sedgewick.  The previous SBCL support
;;; was incomplete.
;;;
;;; Revision 1.7  2003/02/14 05:42:12  rtoy
;;; Undo previous change.  We really need the 1x1-complex-array for
;;; Allegro because we don't (currently) pass in complex double-floats as
;;; an array.  (Not needed for CMUCL which handles this correctly.)
;;;
;;; Revision 1.5  2001/10/29 16:23:10  rtoy
;;; COPY! was broken on CMUCL because FORTRAN-DSCAL is no longer
;;; exported.  Use the Allegro version.  From M. Koerber.
;;;
;;; Revision 1.4  2000/07/11 18:02:03  simsek
;;; o Added credits
;;;
;;; Revision 1.3  2000/07/11 02:11:56  simsek
;;; o Added support for Allegro CL
;;;
;;; Revision 1.2  2000/05/08 17:19:18  rtoy
;;; Changes to the STANDARD-MATRIX class:
;;; o The slots N, M, and NXM have changed names.
;;; o The accessors of these slots have changed:
;;;      NROWS, NCOLS, NUMBER-OF-ELEMENTS
;;;   The old names aren't available anymore.
;;; o The initargs of these slots have changed:
;;;      :nrows, :ncols, :nels
;;;
;;; Revision 1.1  2000/04/14 00:11:12  simsek
;;; o This file is adapted from obsolete files 'matrix-float.lisp'
;;;   'matrix-complex.lisp' and 'matrix-extra.lisp'
;;; o Initial revision.
;;;
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(in-package #:matlisp)

(defmacro generate-typed-copy! (func (tensor-class blas-func))
  ;;Be very careful when using functions generated by this macro.
  ;;Indexes can be tricky and this has no safety net
  ;;Use only after checking the arguments for compatibility.
  (let* ((opt (get-tensor-class-optimization tensor-class)))
    (assert opt nil 'tensor-cannot-find-optimization :tensor-class tensor-class)
    `(defun ,func (from to)
       (declare (type ,tensor-class from to))
       (let ((f-dims (dimensions from))
	     (f-stds (strides from))
	     (f-sto (store from))
	     (f-hd (head from))
	     (t-dims (dimensions to))
	     (t-stds (strides to))
	     (t-sto (store to))
	     (t-hd (head to)))
	 (declare (type (index-array *) f-dims f-stds t-dims t-stds)
		  (type index-type f-hd t-hd)
		  (type ,(linear-array-type (getf opt :store-type)) f-sto t-sto))
	 (if (or (and (row-major-p t-stds t-dims) (row-major-p f-stds f-dims))
		 (and (col-major-p t-stds t-dims) (col-major-p f-stds f-dims)))
	     (,blas-func (number-of-elements from) f-sto 1 t-sto 1 f-hd t-hd)
	     (very-quickly
	       ;;Can possibly make this faster (x2) by using ,blas-func in one of
	       ;;the inner loops, but this is to me messy and as of now unnecessary.
	       ;;SBCL can already achieve Fortran-ish speed inside this loop.
	       (mod-dotimes (idx f-dims)
		 with (linear-sums
		       (f-of f-stds f-hd)
		       (t-of t-stds t-hd))
		 do ,(funcall (getf opt :reader-writer) 'f-sto 'f-of 't-sto 't-of))))
	 to))))

(defmacro generate-typed-num-copy! (func (tensor-class blas-func))
  ;;Be very careful when using functions generated by this macro.
  ;;Indexes can be tricky and this has no safety net
  ;;(you don't see a matrix-ref do you ?)
  ;;Use only after checking the arguments for compatibility.
  (let* ((opt (get-tensor-class-optimization tensor-class)))
    (assert opt nil 'tensor-cannot-find-optimization :tensor-class tensor-class)
    `(defun ,func (num-from to)
       (declare (type ,tensor-class to)
		(type ,(getf opt :element-type) num-from))
       (let ((t-dims (dimensions to))
	     (t-stds (strides to))
	     (t-sto (store to))
	     (t-hd (head to)))
	 (declare (type (index-array *) t-dims t-stds)
		  (type index-type t-hd)
		  (type ,(linear-array-type (getf opt :store-type)) t-sto))
	 (if (consecutive-p t-stds t-dims)
	     (let ((num-array (,(getf opt :store-allocator) 1)))
	       (declare (type ,(linear-array-type (getf opt :store-type)) num-array))
	       ,(funcall (getf opt :value-writer) 'num-from 'num-array 0)
	       (,blas-func (number-of-elements to) num-array 0 t-sto 1 0 t-hd))
	     (very-quickly
	       ;;Can possibly make this faster (x2) by using ,blas-func in one of
	       ;;the inner loops, but this is to me messy and as of now unnecessary.
	       ;;SBCL can already achieve Fortran-ish speed inside this loop.
	       (mod-dotimes (idx t-dims)
		 with (linear-sums
		       (t-of t-stds t-hd))
		 do ,(funcall (getf opt :value-writer) 'num-from 't-sto 't-of))))
	 to))))

(generate-typed-copy! real-typed-copy! (real-tensor dcopy))
(generate-typed-num-copy! real-typed-num-copy! (real-tensor dcopy))

(generate-typed-copy! complex-typed-copy! (complex-tensor zcopy))
(generate-typed-num-copy! complex-typed-num-copy! (complex-tensor zcopy))
;;---------------------------------------------------------------;;
(defgeneric copy! (from-tensor to-tensor)
  (:documentation
   "
  Syntax
  ======
  (COPY! x y)

  Purpose
  =======
  Copies the contents of the tensor X to
  the tensor Y, returns Y.

  X,Y must have the same dimensions, and
  ergo the same number of elements.

  Furthermore, X may be a scalar, in which
  case Y is filled with X.

  The contents of X must be coercable to
  the type of Y.  For example,
  a COMPLEX-MATRIX cannot be copied to a
  REAL-MATRIX but the converse is possible.
")
  (:method :before ((x standard-tensor) (y standard-tensor))
	   (unless (same-dimension-p (dimensions x) (dimensions y))
	     (error 'tensor-dimension-mismatch)))
  (:method ((x standard-tensor) (y standard-tensor))
    (mod-dotimes (idx (dimensions x))
      do (setf (tensor-ref y idx) (tensor-ref x idx)))
    y)
  (:method ((x complex-tensor) (y real-tensor))
    (error 'coercion-error :from 'complex-tensor :to 'real-tensor)))

(defmethod copy! ((x real-tensor) (y real-tensor))
  (real-typed-copy! x y))

(defmethod copy! ((x number) (y real-tensor))
  (real-typed-num-copy! (coerce-real x) y))

(defmethod copy! ((x complex-matrix) (y complex-tensor))
  (complex-typed-copy! x y))

;; (defmethod copy! ((x real-matrix) (y complex-tensor))
;;   (real-double-copy!-typed x (mrealpart~ y))
;;   (scal! 0d0 (mimagpart~ y))
;;   y)

(defmethod copy! ((x number) (y complex-tensor))
  (complex-typed-num-copy! (coerce-complex x) y))

;;;;
(defgeneric copy (matrix)
  (:documentation 
   "
  Syntax
  ======
  (COPY x)
 
  Purpose
  =======
  Return a copy of the matrix X"))

(defmethod copy ((matrix real-matrix))
  (let* ((n (nrows matrix))
	 (m (ncols matrix))
	 (result (make-real-matrix-dim n m)))
    (declare (type fixnum n m))
    (copy! matrix result)))

(defmethod copy ((matrix complex-matrix))
  (let* ((n (nrows matrix))
	 (m (ncols matrix))
	 (result (make-complex-matrix-dim n m)))
    (declare (type fixnum n m))
    (copy! matrix result)))

(defmethod copy ((matrix number))
  matrix)

;;
(defgeneric convert-to-lisp-array (matrix)
  (:documentation
   "
  Syntax
  ======
  (CONVERT-TO-LISP-ARRAY matrix)

  Purpose
  =======
  Create a new Lisp array with the same dimensions as the matrix and
  with the same elements.  This is a copy of the matrix.

  Row and column vectors are converted to a 1D lisp vector.  Other
  matrices are converted a 2D lisp array.
"))

(defun convert-1d-array (m eltype)
  (let ((array (make-array (* (number-of-rows m)
			      (number-of-cols m))
			   :element-type eltype)))
    ;; We could do this faster by accessing the storage directly, but
    ;; this is easy.
    (dotimes (k (length array))
      (setf (aref array k) (matrix-ref m k)))
    array))

(defun convert-2d-array (m eltype)
  (let* ((nrows (number-of-rows m))
	 (ncols (number-of-cols m))
	 (array (make-array (list (number-of-rows m)
				  (number-of-cols m))
			    :element-type eltype)))
    ;; We could do this faster by accessing the storage directly, but
    ;; this is easy.
    (dotimes (r nrows)
      (dotimes (c ncols)
	(setf (aref array r c)
	      (matrix-ref m r c))))
    array))

(defmethod convert-to-lisp-array ((m real-matrix))
  (if (or (row-vector-p m) (col-vector-p m))
      (convert-1d-array m 'double-float)
      (convert-2d-array m 'double-float)))

(defmethod convert-to-lisp-array ((m complex-matrix))
  (if (or (row-vector-p m) (col-vector-p m))
      (convert-1d-array m '(complex double-float))
      (convert-2d-array m '(complex double-float))))
