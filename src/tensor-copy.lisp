(in-package :matlisp)

;;TODO-> use macrofied setf-ers and old {d, z} copy code to automate code-generation.
(defun tensor-copy (from to)
  (declare (type real-tensor to from))
  (let ((st-f (store from))
	(st-t (store to)))
    (declare (type (real-array *) st-f st-t))
    (very-quickly
      (mod-dotimes (idx (dimensions from))
	with (linear-sums
	      (of-t (strides to) (head to))
	      (of-f (strides from) (head from)))
	do (setf (aref st-t of-t) (aref st-f of-f))))))

(defun dimensions-check (a b)
  (declare (type (index-array *) a b))
  (let ((l-a (length a)))
    (when (= l-a (length b))
      (very-quickly
	(loop
	   for i from 0 below l-a
	   unless (= (aref a i) (aref b i))
	   do (return nil)
	   finally (return t))))))


(defmacro generate-typed-copy!-func (func (tensor-class blas-func))
  ;;Be very careful when using functions generated by this macro.
  ;;Indexes can be tricky and this has no safety net
  ;;Use only after checking the arguments for compatibility.
  (let* ((opt (get-tensor-class-optimization tensor-class)))
  `(defun ,func (from to)
     (declare (type tensor-type from to))
     (let ((f-dims (dimensions from))
	   (f-stds (strides from))
	   (f-sto (store from))
	   (f-hd (head from))
	   (t-dims (dimensions to))
	   (t-stds (strides to))
	   (t-sto (store to))
	   (t-hd (head to)))
    (declare (type (index-array *) f-dims f-stds t-dims t-stds)
	     (type index-type f-hd t-hd)
	     (type ,(linear-array-type (getf opt :store-type)) f-sto t-sto))
    (if (or (and (row-major-p t-stds t-dims) (row-major-p f-stds f-dims))
	    (and (col-major-p t-stds t-dims) (col-major-p f-stds f-dims)))
	(,blas-func (number-of-elements from) f-sto 1 t-sto 1 f-hd t-hd)
	(very-quickly
	  ;;Can possibly make this faster (x2) by using ,blas-func in one of
	  ;;the inner loops, but this is to me messy and as of now unnecessary.
	  ;;SBCL can already achieve Fortran-ish speed inside this loop.
	  (mod-dotimes (idx f-dims)
	    with (linear-sums
		  (f-of f-stds f-hd)
		  (t-of t-stds t-hd))
	    do ,(funcall (getf opt :reader-writer) 'f-sto 'f-of 't-sto 't-of))))
    to))))

(generate-typed-copy!-func real-tensor-copy! (real-tensor dcopy))
