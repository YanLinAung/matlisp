;;; -*- Mode: lisp; Syntax: ansi-common-lisp; Package: :matlisp; Base: 10 -*-
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Copyright (c) 2000 The Regents of the University of California.
;;; All rights reserved. 
;;; 
;;; Permission is hereby granted, without written agreement and without
;;; license or royalty fees, to use, copy, modify, and distribute this
;;; software and its documentation for any purpose, provided that the
;;; above copyright notice and the following two paragraphs appear in all
;;; copies of this software.
;;; 
;;; IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
;;; FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
;;; ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
;;; THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
;;; SUCH DAMAGE.
;;;
;;; THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
;;; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
;;; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
;;; PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
;;; CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
;;; ENHANCEMENTS, OR MODIFICATIONS.
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(in-package #:matlisp)

(defmacro generate-typed-copy! (func (tensor-class blas-func fortran-lb))
  ;;Be very careful when using functions generated by this macro.
  ;;Indexes can be tricky and this has no safety net
  ;;Use only after checking the arguments for compatibility.
  (let* ((opt (get-tensor-class-optimization tensor-class)))
    (assert opt nil 'tensor-cannot-find-optimization :tensor-class tensor-class)
    `(defun ,func (from to)
       (declare (type ,tensor-class from to))
       (let ((strd-p (blas-copyable-p from to))
	     (call-fortran? (> (number-of-elements to) ,fortran-lb)))
	 (cond
	   ((and strd-p call-fortran?)
	    (,blas-func (number-of-elements from)
			(store from) (first strd-p)
			(store to) (second strd-p)
			(head from) (head to)))
	   (t
	    (let ((f-sto (store from))
		  (t-sto (store to)))
	      (declare (type ,(linear-array-type (getf opt :store-type)) f-sto t-sto))
	      (very-quickly
		;;Can possibly make this faster (x2) by using ,blas-func in one of
		;;the inner loops, but this is to me messy and as of now unnecessary.
		;;SBCL can already achieve Fortran-ish speed inside this loop.
		(mod-dotimes (idx (dimensions from))
		  with (linear-sums
			(f-of (strides from) (head from))
			(t-of (strides to) (head to)))
		  do ,(funcall (getf opt :reader-writer) 'f-sto 'f-of 't-sto 't-of)))))))
       to)))

(defmacro generate-typed-num-copy! (func (tensor-class blas-func fortran-lb))
  ;;Be very careful when using functions generated by this macro.
  ;;Indexes can be tricky and this has no safety net
  ;;(you don't see a matrix-ref do you ?)
  ;;Use only after checking the arguments for compatibility.
  (let* ((opt (get-tensor-class-optimization tensor-class)))
    (assert opt nil 'tensor-cannot-find-optimization :tensor-class tensor-class)
    `(defun ,func (num-from to)
       (declare (type ,tensor-class to)
		(type ,(getf opt :element-type) num-from))
       (let ((min-stride (consecutive-store-p to))
	     (call-fortran? (> (number-of-elements to) ,fortran-lb)))
	 (cond
	   ((and min-stride call-fortran?)
	    (let ((num-array (,(getf opt :store-allocator) 1)))
	      (declare (type ,(linear-array-type (getf opt :store-type)) num-array))
	      ,(funcall (getf opt :value-writer) 'num-from 'num-array 0)
	      (,blas-func (number-of-elements to)
			  num-array 0
			  (store to) min-stride
			  0 (head to))))
	   (t
	    (let-typed
	     ((t-sto (store to) :type ,(linear-array-type (getf opt :store-type))))
	     (very-quickly
	       (mod-dotimes (idx (dimensions to))
		 with (linear-sums
		       (t-of (strides to) (head to)))
		 do ,(funcall (getf opt :value-writer) 'num-from 't-sto 't-of)))))))
       to)))


;;Tweakable
(defparameter *real-copy-fortran-call-lower-bound* 20000
  "
  If the dimension of the arguments is less than this parameter,
  then the Lisp version of copy is used. Default set with SBCL running
  on x86-64 linux. A reasonable value would be something above 1000.")
(generate-typed-copy! real-typed-copy! (real-tensor
					dcopy
					*real-copy-fortran-call-lower-bound*))
(generate-typed-num-copy! real-typed-num-copy! (real-tensor
						dcopy
						*real-copy-fortran-call-lower-bound*))

;;Tweakable
(defparameter *complex-copy-fortran-call-lower-bound* 10000
  "
  If the dimension of the arguments is less than this parameter,
  then the Lisp version of copy is used. Default set with SBCL
  running on x86-64 linux. A reasonable value would be something
  above 1000.")
			  
(generate-typed-copy! complex-typed-copy! (complex-tensor
					   zcopy
					   *complex-copy-fortran-call-lower-bound*))
(generate-typed-num-copy! complex-typed-num-copy! (complex-tensor
						   zcopy
						   *complex-copy-fortran-call-lower-bound*))
;;---------------------------------------------------------------;;

(defun test-copy (n r)
  (let ((x (make-real-tensor n)))
    (time (dotimes (i r)
	    (copy! pi x)))
    t))

(defgeneric copy! (from-tensor to-tensor)
  (:documentation
   "
  Syntax
  ======
  (COPY! x y)

  Purpose
  =======
  Copies the contents of the tensor X to
  the tensor Y, returns Y.

  X,Y must have the same dimensions, and
  ergo the same number of elements.

  Furthermore, X may be a scalar, in which
  case Y is filled with X.

  The contents of X must be coercable to
  the type of Y.  For example,
  a COMPLEX-MATRIX cannot be copied to a
  REAL-MATRIX but the converse is possible.
")
  (:method :before ((x standard-tensor) (y standard-tensor))
	   (unless (idx= (dimensions x) (dimensions y))
	     (error 'tensor-dimension-mismatch)))
  (:method ((x standard-tensor) (y standard-tensor))
    (mod-dotimes (idx (dimensions x))
      do (setf (tensor-ref y idx) (tensor-ref x idx)))
    y)
  (:method ((x complex-tensor) (y real-tensor))
    (error 'coercion-error :from 'complex-tensor :to 'real-tensor)))

(defmethod copy! ((x real-tensor) (y real-tensor))
  (real-typed-copy! x y))

(defmethod copy! ((x number) (y real-tensor))
  (real-typed-num-copy! (coerce-real x) y))

(defmethod copy! ((x complex-tensor) (y complex-tensor))
  (complex-typed-copy! x y))

(defmethod copy! ((x real-tensor) (y complex-tensor))
  ;;Borrowed from realimag.lisp
  (let ((tmp (make-instance 'real-tensor
			    :parent-tensor y :store (store y)
			    :dimensions (dimensions y)
			    :strides (map '(index-array *) #'(lambda (n) (* 2 n)) (strides y))
			    :head (the index-type (* 2 (head y))))))
    (declare (type real-tensor tmp))
    (real-typed-copy! x tmp)
    ;;Increasing the head by 1 points us to the imaginary part.
    (incf (head tmp))
    (real-typed-num-copy! 0d0 tmp))
  y)

(defmethod copy! ((x number) (y complex-tensor))
  (complex-typed-num-copy! (coerce-complex x) y))

;;
(defgeneric copy (tensor)
  (:documentation 
   "
  Syntax
  ======
  (COPY x)
 
  Purpose
  =======
  Return a copy of the tensor X"))

(defmethod copy ((tensor real-tensor))
  (let* ((ret (apply #'make-real-tensor (idx->list (dimensions tensor)))))
    (declare (type real-tensor ret))
    (copy! tensor ret)))

(defmethod copy ((tensor complex-tensor))
  (let* ((ret (apply #'make-complex-tensor (idx->list (dimensions tensor)))))
    (declare (type complex-tensor ret))
    (copy! tensor ret)))

(defmethod copy ((tensor number))
  tensor)

;;
(defun convert-to-lisp-array (tensor)
"
  Syntax
  ======
  (convert-to-lisp-array tensor)

  Purpose
  =======
  Create a new Lisp array with the same dimensions as the tensor and
  with the same elements.  This is a copy of the tensor.
"
  (declare (type standard-tensor tensor))
  (let* ((dims (dimensions tensor))
	 (ret (make-array (idx->list dims)
			  :element-type (if-ret (getf (get-tensor-class-optimization (class-name (class-of tensor)))  :element-type)
						(error 'tensor-cannot-find-optimization :tensor-class (class-name (class-of tensor)))))))
    (declare (type (index-array *) dims))
    (very-quickly
      (mod-dotimes (idx dims)
	do (setf (apply #'aref ret (idx->list idx)) (tensor-ref tensor idx))))
    ret))
